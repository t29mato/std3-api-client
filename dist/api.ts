/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiDatabasesData
 */
export interface ApiDatabasesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiDatabasesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiDatabasesData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiDatabasesData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiDatabasesDataAttributes}
     * @memberof ApiDatabasesData
     */
    attributes?: ApiDatabasesDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiDatabasesDataAttributes
 */
export interface ApiDatabasesDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiDatabasesDataAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface ApiDatabasesDataLinks
 */
export interface ApiDatabasesDataLinks {
    /**
     * 
     * @type {Link}
     * @memberof ApiDatabasesDataLinks
     */
    self?: Link;
}
/**
 * 
 * @export
 * @interface ApiFabricationProcessesData
 */
export interface ApiFabricationProcessesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFabricationProcessesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFabricationProcessesData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiFabricationProcessesData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiFabricationProcessesDataAttributes}
     * @memberof ApiFabricationProcessesData
     */
    attributes?: ApiFabricationProcessesDataAttributes;
    /**
     * 
     * @type {ApiFabricationProcessesDataRelationships}
     * @memberof ApiFabricationProcessesData
     */
    relationships?: ApiFabricationProcessesDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiFabricationProcessesDataAttributes
 */
export interface ApiFabricationProcessesDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiFabricationProcessesDataAttributes
     */
    name_ja: string;
}
/**
 * 
 * @export
 * @interface ApiFabricationProcessesDataRelationships
 */
export interface ApiFabricationProcessesDataRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiFabricationProcessesDataRelationships
     */
    parent_id?: Reltoone;
}
/**
 * 
 * @export
 * @interface ApiFabricationProcessesIdData
 */
export interface ApiFabricationProcessesIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFabricationProcessesIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFabricationProcessesIdData
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiFabricationProcessesIdData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiFabricationProcessesIdDataAttributes}
     * @memberof ApiFabricationProcessesIdData
     */
    attributes?: ApiFabricationProcessesIdDataAttributes;
    /**
     * 
     * @type {ApiFabricationProcessesDataRelationships}
     * @memberof ApiFabricationProcessesIdData
     */
    relationships?: ApiFabricationProcessesDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiFabricationProcessesIdDataAttributes
 */
export interface ApiFabricationProcessesIdDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiFabricationProcessesIdDataAttributes
     */
    name_ja?: string;
}
/**
 * 
 * @export
 * @interface ApiFiguresData
 */
export interface ApiFiguresData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFiguresData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiFiguresData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiFiguresData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiFiguresDataAttributes}
     * @memberof ApiFiguresData
     */
    attributes?: ApiFiguresDataAttributes;
    /**
     * 
     * @type {ApiFiguresDataRelationships}
     * @memberof ApiFiguresData
     */
    relationships?: ApiFiguresDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiFiguresDataAttributes
 */
export interface ApiFiguresDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiFiguresDataAttributes
     */
    title: string;
}
/**
 * 
 * @export
 * @interface ApiFiguresDataRelationships
 */
export interface ApiFiguresDataRelationships {
    /**
     * 
     * @type {Reltomany}
     * @memberof ApiFiguresDataRelationships
     */
    paper?: Reltomany;
}
/**
 * 
 * @export
 * @interface ApiPapersData
 */
export interface ApiPapersData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPapersData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPapersData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiPapersData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiPapersDataAttributes}
     * @memberof ApiPapersData
     */
    attributes?: ApiPapersDataAttributes;
    /**
     * 
     * @type {ApiPapersDataRelationships}
     * @memberof ApiPapersData
     */
    relationships?: ApiPapersDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiPapersDataAttributes
 */
export interface ApiPapersDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    authors: string;
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    DOI: string;
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    container_title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiPapersDataAttributes
     */
    publisher?: string;
}
/**
 * 
 * @export
 * @interface ApiPapersDataRelationships
 */
export interface ApiPapersDataRelationships {
    /**
     * 
     * @type {Reltomany}
     * @memberof ApiPapersDataRelationships
     */
    database?: Reltomany;
}
/**
 * 
 * @export
 * @interface ApiPolymerNodesData
 */
export interface ApiPolymerNodesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesData
     */
    id?: string;
    /**
     * 
     * @type {ApiPolymerNodesDataAttributes}
     * @memberof ApiPolymerNodesData
     */
    attributes: ApiPolymerNodesDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiPolymerNodesDataAttributes
 */
export interface ApiPolymerNodesDataAttributes {
    /**
     * 
     * @type {ApiPolymerNodesDataAttributesPolymerTag}
     * @memberof ApiPolymerNodesDataAttributes
     */
    polymer_tag: ApiPolymerNodesDataAttributesPolymerTag;
    /**
     * 
     * @type {ApiPolymerNodesDataAttributesPolymerTag}
     * @memberof ApiPolymerNodesDataAttributes
     */
    parent: ApiPolymerNodesDataAttributesPolymerTag;
}
/**
 * 
 * @export
 * @interface ApiPolymerNodesDataAttributesPolymerTag
 */
export interface ApiPolymerNodesDataAttributesPolymerTag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesDataAttributesPolymerTag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesDataAttributesPolymerTag
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ApiPolymerNodesIdData
 */
export interface ApiPolymerNodesIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerNodesIdData
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiPolymerNodesIdData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {object}
     * @memberof ApiPolymerNodesIdData
     */
    attributes?: object;
    /**
     * 
     * @type {ApiPolymerNodesIdDataRelationships}
     * @memberof ApiPolymerNodesIdData
     */
    relationships?: ApiPolymerNodesIdDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiPolymerNodesIdDataRelationships
 */
export interface ApiPolymerNodesIdDataRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiPolymerNodesIdDataRelationships
     */
    polymer_tag?: Reltoone;
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiPolymerNodesIdDataRelationships
     */
    parent?: Reltoone;
}
/**
 * 
 * @export
 * @interface ApiPolymerTagsData
 */
export interface ApiPolymerTagsData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerTagsData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerTagsData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiPolymerTagsData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiPolymerTagsDataAttributes}
     * @memberof ApiPolymerTagsData
     */
    attributes?: ApiPolymerTagsDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiPolymerTagsDataAttributes
 */
export interface ApiPolymerTagsDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiPolymerTagsDataAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface ApiPolymerTagsIdData
 */
export interface ApiPolymerTagsIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerTagsIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiPolymerTagsIdData
     */
    id: string;
    /**
     * 
     * @type {ApiPolymerTagsIdDataAttributes}
     * @memberof ApiPolymerTagsIdData
     */
    attributes?: ApiPolymerTagsIdDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiPolymerTagsIdDataAttributes
 */
export interface ApiPolymerTagsIdDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiPolymerTagsIdDataAttributes
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ApiSamplesData
 */
export interface ApiSamplesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSamplesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSamplesData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiSamplesData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiDatabasesDataAttributes}
     * @memberof ApiSamplesData
     */
    attributes?: ApiDatabasesDataAttributes;
    /**
     * 
     * @type {ApiFiguresDataRelationships}
     * @memberof ApiSamplesData
     */
    relationships?: ApiFiguresDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiSynthesisMethodTagTreeNodesData
 */
export interface ApiSynthesisMethodTagTreeNodesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagTreeNodesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagTreeNodesData
     */
    id?: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiSynthesisMethodTagTreeNodesData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiDatabasesDataAttributes}
     * @memberof ApiSynthesisMethodTagTreeNodesData
     */
    attributes?: ApiDatabasesDataAttributes;
    /**
     * 
     * @type {ApiSynthesisMethodTagTreeNodesDataRelationships}
     * @memberof ApiSynthesisMethodTagTreeNodesData
     */
    relationships?: ApiSynthesisMethodTagTreeNodesDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiSynthesisMethodTagTreeNodesDataRelationships
 */
export interface ApiSynthesisMethodTagTreeNodesDataRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiSynthesisMethodTagTreeNodesDataRelationships
     */
    synthesis_method_tag?: Reltoone;
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiSynthesisMethodTagTreeNodesDataRelationships
     */
    parent?: Reltoone;
}
/**
 * 
 * @export
 * @interface ApiSynthesisMethodTagTreeNodesIdData
 */
export interface ApiSynthesisMethodTagTreeNodesIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagTreeNodesIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagTreeNodesIdData
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiSynthesisMethodTagTreeNodesIdData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiSynthesisMethodTagsIdDataAttributes}
     * @memberof ApiSynthesisMethodTagTreeNodesIdData
     */
    attributes?: ApiSynthesisMethodTagsIdDataAttributes;
    /**
     * 
     * @type {ApiSynthesisMethodTagTreeNodesDataRelationships}
     * @memberof ApiSynthesisMethodTagTreeNodesIdData
     */
    relationships?: ApiSynthesisMethodTagTreeNodesDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiSynthesisMethodTagsIdData
 */
export interface ApiSynthesisMethodTagsIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagsIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiSynthesisMethodTagsIdData
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof ApiSynthesisMethodTagsIdData
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {ApiSynthesisMethodTagsIdDataAttributes}
     * @memberof ApiSynthesisMethodTagsIdData
     */
    attributes?: ApiSynthesisMethodTagsIdDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiSynthesisMethodTagsIdDataAttributes
 */
export interface ApiSynthesisMethodTagsIdDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiSynthesisMethodTagsIdDataAttributes
     */
    name?: string;
}
/**
 * @type Data
 * The document\'s `primary data` is a representation of the resource or collection of resources targeted by a request.
 * @export
 */
export type Data = Resource | Set<Resource> | number;

/**
 * 
 * @export
 * @interface Database
 */
export interface Database {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Database
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Database
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof Database
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {DatabaseAttributes}
     * @memberof Database
     */
    attributes?: DatabaseAttributes;
}
/**
 * 
 * @export
 * @interface DatabaseAttributes
 */
export interface DatabaseAttributes {
    /**
     * 
     * @type {number}
     * @memberof DatabaseAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    sample_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    paper_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    figure_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    name: string;
}
/**
 * singular item
 * @export
 * @interface Datum
 */
export interface Datum {
    /**
     * 
     * @type {Resource}
     * @memberof Datum
     */
    data?: Resource;
}
/**
 * 
 * @export
 * @interface ErrorSource
 */
export interface ErrorSource {
    /**
     * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute].
     * @type {string}
     * @memberof ErrorSource
     */
    pointer?: string;
    /**
     * A string indicating which query parameter caused the error.
     * @type {string}
     * @memberof ErrorSource
     */
    parameter?: string;
}
/**
 * 
 * @export
 * @interface FabricationProcess
 */
export interface FabricationProcess {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof FabricationProcess
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof FabricationProcess
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof FabricationProcess
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {FabricationProcessAttributes}
     * @memberof FabricationProcess
     */
    attributes?: FabricationProcessAttributes;
    /**
     * 
     * @type {ApiFabricationProcessesDataRelationships}
     * @memberof FabricationProcess
     */
    relationships?: ApiFabricationProcessesDataRelationships;
}
/**
 * 
 * @export
 * @interface FabricationProcessAttributes
 */
export interface FabricationProcessAttributes {
    /**
     * 
     * @type {number}
     * @memberof FabricationProcessAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FabricationProcessAttributes
     */
    name_ja: string;
}
/**
 * 
 * @export
 * @interface Failure
 */
export interface Failure {
    /**
     * 
     * @type {Set<ModelError>}
     * @memberof Failure
     */
    errors: Set<ModelError>;
    /**
     * 
     * @type {Meta}
     * @memberof Failure
     */
    meta?: Meta;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Failure
     */
    links?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Figure
 */
export interface Figure {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Figure
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Figure
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof Figure
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {FigureAttributes}
     * @memberof Figure
     */
    attributes?: FigureAttributes;
    /**
     * 
     * @type {ApiFiguresDataRelationships}
     * @memberof Figure
     */
    relationships?: ApiFiguresDataRelationships;
}
/**
 * 
 * @export
 * @interface FigureAttributes
 */
export interface FigureAttributes {
    /**
     * 
     * @type {number}
     * @memberof FigureAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FigureAttributes
     */
    title: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {ApiDatabasesData}
     * @memberof InlineObject
     */
    data: ApiDatabasesData;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {ApiPapersData}
     * @memberof InlineObject1
     */
    data: ApiPapersData;
}
/**
 * 
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * 
     * @type {ApiDatabasesData}
     * @memberof InlineObject10
     */
    data: ApiDatabasesData;
}
/**
 * 
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * 
     * @type {ApiSynthesisMethodTagsIdData}
     * @memberof InlineObject11
     */
    data: ApiSynthesisMethodTagsIdData;
}
/**
 * 
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * 
     * @type {ApiSynthesisMethodTagTreeNodesData}
     * @memberof InlineObject12
     */
    data: ApiSynthesisMethodTagTreeNodesData;
}
/**
 * 
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * 
     * @type {ApiSynthesisMethodTagTreeNodesIdData}
     * @memberof InlineObject13
     */
    data: ApiSynthesisMethodTagTreeNodesIdData;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {ApiFiguresData}
     * @memberof InlineObject2
     */
    data: ApiFiguresData;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {ApiSamplesData}
     * @memberof InlineObject3
     */
    data: ApiSamplesData;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {ApiPolymerTagsData}
     * @memberof InlineObject4
     */
    data: ApiPolymerTagsData;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {ApiPolymerTagsIdData}
     * @memberof InlineObject5
     */
    data: ApiPolymerTagsIdData;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {ApiPolymerNodesData}
     * @memberof InlineObject6
     */
    data: ApiPolymerNodesData;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 
     * @type {ApiPolymerNodesIdData}
     * @memberof InlineObject7
     */
    data: ApiPolymerNodesIdData;
}
/**
 * 
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * 
     * @type {ApiFabricationProcessesData}
     * @memberof InlineObject8
     */
    data: ApiFabricationProcessesData;
}
/**
 * 
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * 
     * @type {ApiFabricationProcessesIdData}
     * @memberof InlineObject9
     */
    data: ApiFabricationProcessesIdData;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Database>}
     * @memberof InlineResponse200
     */
    data: Array<Database>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse200
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse200
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Paper>}
     * @memberof InlineResponse2001
     */
    data: Array<Paper>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2001
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2001
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Figure>}
     * @memberof InlineResponse2002
     */
    data: Array<Figure>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2002
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2002
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<Sample>}
     * @memberof InlineResponse2003
     */
    data: Array<Sample>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2003
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2003
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<PolymerTag>}
     * @memberof InlineResponse2004
     */
    data: Array<PolymerTag>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2004
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2004
     */
    links: any & Pagination;
    /**
     * 
     * @type {Meta}
     * @memberof InlineResponse2004
     */
    meta: Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<PolymerNode>}
     * @memberof InlineResponse2005
     */
    data: Array<PolymerNode>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2005
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2005
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {PolymerTagTree}
     * @memberof InlineResponse2006
     */
    data: PolymerTagTree;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {Array<FabricationProcess>}
     * @memberof InlineResponse2007
     */
    data: Array<FabricationProcess>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2007
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2007
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<SynthesisMethodTag>}
     * @memberof InlineResponse2008
     */
    data: Array<SynthesisMethodTag>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2008
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2008
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Array<SynthesisMethodTagTreeNode>}
     * @memberof InlineResponse2009
     */
    data: Array<SynthesisMethodTagTreeNode>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2009
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2009
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {Database}
     * @memberof InlineResponse201
     */
    data: Database;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse201
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse201
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {Paper}
     * @memberof InlineResponse2011
     */
    data: Paper;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2011
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2011
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2012
 */
export interface InlineResponse2012 {
    /**
     * 
     * @type {Figure}
     * @memberof InlineResponse2012
     */
    data: Figure;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2012
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2012
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2013
 */
export interface InlineResponse2013 {
    /**
     * 
     * @type {Sample}
     * @memberof InlineResponse2013
     */
    data: Sample;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2013
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2013
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2014
 */
export interface InlineResponse2014 {
    /**
     * 
     * @type {PolymerTag}
     * @memberof InlineResponse2014
     */
    data: PolymerTag;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2014
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2014
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2015
 */
export interface InlineResponse2015 {
    /**
     * 
     * @type {PolymerNode}
     * @memberof InlineResponse2015
     */
    data: PolymerNode;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2015
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2015
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2016
 */
export interface InlineResponse2016 {
    /**
     * 
     * @type {FabricationProcess}
     * @memberof InlineResponse2016
     */
    data: FabricationProcess;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2016
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2016
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2017
 */
export interface InlineResponse2017 {
    /**
     * 
     * @type {SynthesisMethodTag}
     * @memberof InlineResponse2017
     */
    data: SynthesisMethodTag;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2017
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2017
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2018
 */
export interface InlineResponse2018 {
    /**
     * 
     * @type {SynthesisMethodTagTreeNode}
     * @memberof InlineResponse2018
     */
    data: SynthesisMethodTagTreeNode;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2018
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2018
     */
    links?: any & Pagination;
}
/**
 * @type Link
 * A link **MUST** be represented as either: a string containing the link\'s URL or a link object.
 * @export
 */
export type Link = LinkOneOf | string;

/**
 * 
 * @export
 * @interface LinkOneOf
 */
export interface LinkOneOf {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof LinkOneOf
     */
    href: string;
    /**
     * 
     * @type {Meta}
     * @memberof LinkOneOf
     */
    meta?: Meta;
}
/**
 * The `type` and `id` to non-empty members.
 * @export
 * @interface Linkage
 */
export interface Linkage {
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    id: string;
    /**
     * 
     * @type {Meta}
     * @memberof Linkage
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * 
     * @type {MetaPagination}
     * @memberof Meta
     */
    pagination: MetaPagination;
}
/**
 * 
 * @export
 * @interface MetaPagination
 */
export interface MetaPagination {
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    pages: number;
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    count: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A unique identifier for this particular occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof ModelError
     */
    links?: { [key: string]: Link; };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    status?: string;
    /**
     * An application-specific error code, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
     * @type {string}
     * @memberof ModelError
     */
    title?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    detail?: string;
    /**
     * 
     * @type {ErrorSource}
     * @memberof ModelError
     */
    source?: ErrorSource;
    /**
     * 
     * @type {Meta}
     * @memberof ModelError
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Onlymeta
 */
export interface Onlymeta {
    /**
     * 
     * @type {Meta}
     * @memberof Onlymeta
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * The first page of data
     * @type {string | number}
     * @memberof Pagination
     */
    first?: string | number;
    /**
     * The last page of data
     * @type {string | number}
     * @memberof Pagination
     */
    last?: string | number;
    /**
     * The previous page of data
     * @type {string | number}
     * @memberof Pagination
     */
    prev?: string | number;
    /**
     * The next page of data
     * @type {string | number}
     * @memberof Pagination
     */
    next?: string | number;
}
/**
 * 
 * @export
 * @interface Paper
 */
export interface Paper {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Paper
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Paper
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof Paper
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {PaperAttributes}
     * @memberof Paper
     */
    attributes?: PaperAttributes;
    /**
     * 
     * @type {ApiPapersDataRelationships}
     * @memberof Paper
     */
    relationships?: ApiPapersDataRelationships;
}
/**
 * 
 * @export
 * @interface PaperAttributes
 */
export interface PaperAttributes {
    /**
     * 
     * @type {number}
     * @memberof PaperAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    sample_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    figure_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    authors: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    DOI: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    container_title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    publisher?: string;
}
/**
 * 
 * @export
 * @interface PolymerNode
 */
export interface PolymerNode {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerNode
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerNode
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof PolymerNode
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {PolymerNodeAttributes}
     * @memberof PolymerNode
     */
    attributes?: PolymerNodeAttributes;
    /**
     * 
     * @type {ApiPolymerNodesIdDataRelationships}
     * @memberof PolymerNode
     */
    relationships?: ApiPolymerNodesIdDataRelationships;
}
/**
 * 
 * @export
 * @interface PolymerNodeAttributes
 */
export interface PolymerNodeAttributes {
    /**
     * 
     * @type {number}
     * @memberof PolymerNodeAttributes
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface PolymerTag
 */
export interface PolymerTag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerTag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerTag
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof PolymerTag
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {PolymerTagAttributes}
     * @memberof PolymerTag
     */
    attributes?: PolymerTagAttributes;
}
/**
 * 
 * @export
 * @interface PolymerTagAttributes
 */
export interface PolymerTagAttributes {
    /**
     * 
     * @type {number}
     * @memberof PolymerTagAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PolymerTagAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface PolymerTagTree
 */
export interface PolymerTagTree {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerTagTree
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PolymerTagTree
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof PolymerTagTree
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {PolymerTagTreeAttributes}
     * @memberof PolymerTagTree
     */
    attributes: PolymerTagTreeAttributes;
}
/**
 * 
 * @export
 * @interface PolymerTagTreeAttributes
 */
export interface PolymerTagTreeAttributes {
    /**
     * 
     * @type {string}
     * @memberof PolymerTagTreeAttributes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PolymerTagTreeAttributes
     */
    node_id: string;
    /**
     * 
     * @type {string}
     * @memberof PolymerTagTreeAttributes
     */
    polymer_tag_id: string;
    /**
     * 
     * @type {string}
     * @memberof PolymerTagTreeAttributes
     */
    parent_node_id: string;
    /**
     * 
     * @type {number}
     * @memberof PolymerTagTreeAttributes
     */
    tree_level: number;
    /**
     * 
     * @type {Array<PolymerTagTreeAttributes>}
     * @memberof PolymerTagTreeAttributes
     */
    children: Array<PolymerTagTreeAttributes>;
}
/**
 * singular item being [created](https://jsonapi.org/format/#crud-creating). `id` is optional and may be ignored if supplied and created by the system.
 * @export
 * @interface PostDatum
 */
export interface PostDatum {
    /**
     * 
     * @type {PostResource}
     * @memberof PostDatum
     */
    data?: PostResource;
}
/**
 * A POSTable resource object has an optional id.
 * @export
 * @interface PostResource
 */
export interface PostResource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    id?: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof PostResource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof PostResource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PostResource
     */
    links?: { [key: string]: Link; };
    /**
     * 
     * @type {Meta}
     * @memberof PostResource
     */
    meta?: Meta;
}
/**
 * A single relationship description
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Relationship
     */
    links?: RelationshipLinks;
    /**
     * Member, whose value represents `resource linkage`.
     * @type {RelationshipToOne | Set}
     * @memberof Relationship
     */
    data?: RelationshipToOne | Set<any>;
    /**
     * 
     * @type {Meta}
     * @memberof Relationship
     */
    meta?: Meta;
}
/**
 * A resource object **MAY** contain references to other resource objects (`relationships`). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipLinks
 */
export interface RelationshipLinks {
    [key: string]: object | any;

    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    self?: Link;
    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    related?: Link;
}
/**
 * References to other resource objects in a to-one (`relationship`). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipToOne
 */
export interface RelationshipToOne {
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    id: string;
    /**
     * 
     * @type {Meta}
     * @memberof RelationshipToOne
     */
    meta?: Meta;
}
/**
 * A multiple relationship
 * @export
 * @interface Reltomany
 */
export interface Reltomany {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltomany
     */
    links?: RelationshipLinks;
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomany
     */
    data?: Set<Linkage>;
    /**
     * 
     * @type {Meta}
     * @memberof Reltomany
     */
    meta?: Meta;
}
/**
 * A multiple relationship, data only.
 * @export
 * @interface Reltomanydata
 */
export interface Reltomanydata {
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomanydata
     */
    data?: Set<Linkage>;
}
/**
 * A singular relationship
 * @export
 * @interface Reltoone
 */
export interface Reltoone {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltoone
     */
    links?: RelationshipLinks;
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoone
     */
    data?: RelationshipToOne;
    /**
     * 
     * @type {Meta}
     * @memberof Reltoone
     */
    meta?: Meta;
}
/**
 * A singular relationship, data only.
 * @export
 * @interface Reltoonedata
 */
export interface Reltoonedata {
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoonedata
     */
    data?: RelationshipToOne;
}
/**
 * Resource objects appear in a JSON API document to represent resources.
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    id: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof Resource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof Resource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Resource
     */
    links?: { [key: string]: Link; };
    /**
     * 
     * @type {Meta}
     * @memberof Resource
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Sample
 */
export interface Sample {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Sample
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Sample
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof Sample
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {SampleAttributes}
     * @memberof Sample
     */
    attributes?: SampleAttributes;
    /**
     * 
     * @type {ApiFiguresDataRelationships}
     * @memberof Sample
     */
    relationships?: ApiFiguresDataRelationships;
}
/**
 * 
 * @export
 * @interface SampleAttributes
 */
export interface SampleAttributes {
    /**
     * 
     * @type {number}
     * @memberof SampleAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SampleAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTag
 */
export interface SynthesisMethodTag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTag
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof SynthesisMethodTag
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {SampleAttributes}
     * @memberof SynthesisMethodTag
     */
    attributes?: SampleAttributes;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTagTreeNode
 */
export interface SynthesisMethodTagTreeNode {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTagTreeNode
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTagTreeNode
     */
    id: string;
    /**
     * 
     * @type {ApiDatabasesDataLinks}
     * @memberof SynthesisMethodTagTreeNode
     */
    links?: ApiDatabasesDataLinks;
    /**
     * 
     * @type {SampleAttributes}
     * @memberof SynthesisMethodTagTreeNode
     */
    attributes?: SampleAttributes;
    /**
     * 
     * @type {ApiSynthesisMethodTagTreeNodesDataRelationships}
     * @memberof SynthesisMethodTagTreeNode
     */
    relationships?: ApiSynthesisMethodTagTreeNodesDataRelationships;
}

/**
 * StarrydataApi - axios parameter creator
 * @export
 */
export const StarrydataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiDatabases: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFabricationProcesses: async (inlineObject8?: InlineObject8, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fabrication_processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject8, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFigures: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/figures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPapers: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/papers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPolymerNodes: async (inlineObject6?: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/polymer_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPolymerTags: async (inlineObject4?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/polymer_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSamples: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/samples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTagTreeNodes: async (inlineObject12?: InlineObject12, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tag_tree_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject12, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTags: async (inlineObject10?: InlineObject10, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject10, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiFabricationProcessesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiPolymerNodesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiPolymerNodesId', 'id', id)
            const localVarPath = `/api/polymer_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiPolymerTagsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiPolymerTagsId', 'id', id)
            const localVarPath = `/api/polymer_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagTreeNodesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiDatabases: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFabricationProcesses: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fabrication_processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFigures: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/figures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPapers: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/papers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPolymerNodes: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/polymer_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPolymerTags: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/polymer_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSamples: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/samples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTagTreeNodes: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tag_tree_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTags: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiFabricationProcessesId: async (id: string, inlineObject9?: InlineObject9, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject9, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiPolymerNodesId: async (id: string, inlineObject7?: InlineObject7, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiPolymerNodesId', 'id', id)
            const localVarPath = `/api/polymer_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiPolymerTagsId: async (id: string, inlineObject5?: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiPolymerTagsId', 'id', id)
            const localVarPath = `/api/polymer_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagTreeNodesId: async (id: string, inlineObject13?: InlineObject13, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject13, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagsId: async (id: string, inlineObject11?: InlineObject11, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject11, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiFabricationProcessesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerNodesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiPolymerNodesId', 'id', id)
            const localVarPath = `/api/polymer_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerTagTreeId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiPolymerTagTreeId', 'id', id)
            const localVarPath = `/api/polymer_tag_tree/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerTagsId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiPolymerTagsId', 'id', id)
            const localVarPath = `/api/polymer_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagTreeNodesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagsId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarrydataApi - functional programming interface
 * @export
 */
export const StarrydataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarrydataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiDatabases(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiDatabases(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiFabricationProcesses(inlineObject8?: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiFabricationProcesses(inlineObject8, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiFigures(inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiFigures(inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiPapers(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiPapers(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiPolymerNodes(inlineObject6?: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiPolymerNodes(inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiPolymerTags(inlineObject4?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiPolymerTags(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiSamples(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiSamples(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiSynthesisMethodTagTreeNodes(inlineObject12?: InlineObject12, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiSynthesisMethodTagTreeNodes(inlineObject12, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiSynthesisMethodTags(inlineObject10?: InlineObject10, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiSynthesisMethodTags(inlineObject10, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiFabricationProcessesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiFabricationProcessesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiPolymerNodesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiPolymerNodesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiPolymerTagsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiPolymerTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiSynthesisMethodTagTreeNodesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiSynthesisMethodTagsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiSynthesisMethodTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiDatabases(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiDatabases(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiFigures(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiFigures(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiPapers(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiPapers(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiPolymerNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiPolymerNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiPolymerTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiPolymerTags(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiSamples(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiSamples(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiFabricationProcessesId(id: string, inlineObject9?: InlineObject9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiFabricationProcessesId(id, inlineObject9, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiPolymerNodesId(id: string, inlineObject7?: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiPolymerNodesId(id, inlineObject7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiPolymerTagsId(id: string, inlineObject5?: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiPolymerTagsId(id, inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, inlineObject13?: InlineObject13, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiSynthesisMethodTagTreeNodesId(id, inlineObject13, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiSynthesisMethodTagsId(id: string, inlineObject11?: InlineObject11, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiSynthesisMethodTagsId(id, inlineObject11, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiPolymerNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiPolymerNodesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiPolymerTagTreeId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiPolymerTagTreeId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiPolymerTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiPolymerTagsId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StarrydataApi - factory interface
 * @export
 */
export const StarrydataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarrydataApiFp(configuration)
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiDatabases(inlineObject?: InlineObject, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.createApiDatabases(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject8} [inlineObject8] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFabricationProcesses(inlineObject8?: InlineObject8, options?: any): AxiosPromise<InlineResponse2016> {
            return localVarFp.createApiFabricationProcesses(inlineObject8, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFigures(inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse2012> {
            return localVarFp.createApiFigures(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPapers(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.createApiPapers(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPolymerNodes(inlineObject6?: InlineObject6, options?: any): AxiosPromise<InlineResponse2015> {
            return localVarFp.createApiPolymerNodes(inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiPolymerTags(inlineObject4?: InlineObject4, options?: any): AxiosPromise<InlineResponse2014> {
            return localVarFp.createApiPolymerTags(inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSamples(inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2013> {
            return localVarFp.createApiSamples(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject12} [inlineObject12] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTagTreeNodes(inlineObject12?: InlineObject12, options?: any): AxiosPromise<InlineResponse2018> {
            return localVarFp.createApiSynthesisMethodTagTreeNodes(inlineObject12, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject10} [inlineObject10] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTags(inlineObject10?: InlineObject10, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.createApiSynthesisMethodTags(inlineObject10, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiFabricationProcessesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiFabricationProcessesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiPolymerNodesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiPolymerNodesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiPolymerTagsId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiPolymerTagsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiSynthesisMethodTagTreeNodesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagsId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiSynthesisMethodTagsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiDatabases(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.listApiDatabases(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFigures(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listApiFigures(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPapers(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.listApiPapers(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPolymerNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.listApiPolymerNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiPolymerTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.listApiPolymerTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSamples(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.listApiSamples(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {InlineObject9} [inlineObject9] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiFabricationProcessesId(id: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<InlineResponse2016> {
            return localVarFp.partialUpdateApiFabricationProcessesId(id, inlineObject9, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {InlineObject7} [inlineObject7] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiPolymerNodesId(id: string, inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse2015> {
            return localVarFp.partialUpdateApiPolymerNodesId(id, inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiPolymerTagsId(id: string, inlineObject5?: InlineObject5, options?: any): AxiosPromise<InlineResponse2014> {
            return localVarFp.partialUpdateApiPolymerTagsId(id, inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {InlineObject13} [inlineObject13] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<InlineResponse2018> {
            return localVarFp.partialUpdateApiSynthesisMethodTagTreeNodesId(id, inlineObject13, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {InlineObject11} [inlineObject11] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagsId(id: string, inlineObject11?: InlineObject11, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.partialUpdateApiSynthesisMethodTagsId(id, inlineObject11, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2016> {
            return localVarFp.retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2015> {
            return localVarFp.retrieveApiPolymerNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerTagTreeId(id: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.retrieveApiPolymerTagTreeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this polymer tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiPolymerTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2014> {
            return localVarFp.retrieveApiPolymerTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2018> {
            return localVarFp.retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2017> {
            return localVarFp.retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StarrydataApi - object-oriented interface
 * @export
 * @class StarrydataApi
 * @extends {BaseAPI}
 */
export class StarrydataApi extends BaseAPI {
    /**
     * 
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiDatabases(inlineObject?: InlineObject, options?: any) {
        return StarrydataApiFp(this.configuration).createApiDatabases(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject8} [inlineObject8] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiFabricationProcesses(inlineObject8?: InlineObject8, options?: any) {
        return StarrydataApiFp(this.configuration).createApiFabricationProcesses(inlineObject8, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiFigures(inlineObject2?: InlineObject2, options?: any) {
        return StarrydataApiFp(this.configuration).createApiFigures(inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiPapers(inlineObject1?: InlineObject1, options?: any) {
        return StarrydataApiFp(this.configuration).createApiPapers(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject6} [inlineObject6] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiPolymerNodes(inlineObject6?: InlineObject6, options?: any) {
        return StarrydataApiFp(this.configuration).createApiPolymerNodes(inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject4} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiPolymerTags(inlineObject4?: InlineObject4, options?: any) {
        return StarrydataApiFp(this.configuration).createApiPolymerTags(inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiSamples(inlineObject3?: InlineObject3, options?: any) {
        return StarrydataApiFp(this.configuration).createApiSamples(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject12} [inlineObject12] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiSynthesisMethodTagTreeNodes(inlineObject12?: InlineObject12, options?: any) {
        return StarrydataApiFp(this.configuration).createApiSynthesisMethodTagTreeNodes(inlineObject12, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject10} [inlineObject10] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiSynthesisMethodTags(inlineObject10?: InlineObject10, options?: any) {
        return StarrydataApiFp(this.configuration).createApiSynthesisMethodTags(inlineObject10, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiFabricationProcessesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiFabricationProcessesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiPolymerNodesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiPolymerNodesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiPolymerTagsId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiPolymerTagsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiSynthesisMethodTagTreeNodesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiSynthesisMethodTagsId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiSynthesisMethodTagsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiDatabases(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiDatabases(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiFigures(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiFigures(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiPapers(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiPapers(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiPolymerNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiPolymerNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiPolymerTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiPolymerTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiSamples(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiSamples(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {InlineObject9} [inlineObject9] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiFabricationProcessesId(id: string, inlineObject9?: InlineObject9, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiFabricationProcessesId(id, inlineObject9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer node.
     * @param {InlineObject7} [inlineObject7] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiPolymerNodesId(id: string, inlineObject7?: InlineObject7, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiPolymerNodesId(id, inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer tag.
     * @param {InlineObject5} [inlineObject5] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiPolymerTagsId(id: string, inlineObject5?: InlineObject5, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiPolymerTagsId(id, inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {InlineObject13} [inlineObject13] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, inlineObject13?: InlineObject13, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiSynthesisMethodTagTreeNodesId(id, inlineObject13, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {InlineObject11} [inlineObject11] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiSynthesisMethodTagsId(id: string, inlineObject11?: InlineObject11, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiSynthesisMethodTagsId(id, inlineObject11, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer node.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiPolymerNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiPolymerNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiPolymerTagTreeId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiPolymerTagTreeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this polymer tag.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiPolymerTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiPolymerTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }
}


