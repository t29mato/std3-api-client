/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiNodesData
 */
export interface ApiNodesData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesData
     */
    id?: string;
    /**
     * 
     * @type {ApiNodesDataAttributes}
     * @memberof ApiNodesData
     */
    attributes: ApiNodesDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiNodesDataAttributes
 */
export interface ApiNodesDataAttributes {
    /**
     * 
     * @type {ApiNodesDataAttributesTag}
     * @memberof ApiNodesDataAttributes
     */
    tag: ApiNodesDataAttributesTag;
    /**
     * 
     * @type {ApiNodesDataAttributesTag}
     * @memberof ApiNodesDataAttributes
     */
    parent: ApiNodesDataAttributesTag;
}
/**
 * 
 * @export
 * @interface ApiNodesDataAttributesTag
 */
export interface ApiNodesDataAttributesTag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesDataAttributesTag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesDataAttributesTag
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ApiNodesIdData
 */
export interface ApiNodesIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiNodesIdData
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof ApiNodesIdData
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {object}
     * @memberof ApiNodesIdData
     */
    attributes?: object;
    /**
     * 
     * @type {ApiNodesIdDataRelationships}
     * @memberof ApiNodesIdData
     */
    relationships?: ApiNodesIdDataRelationships;
}
/**
 * 
 * @export
 * @interface ApiNodesIdDataRelationships
 */
export interface ApiNodesIdDataRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiNodesIdDataRelationships
     */
    tag?: Reltoone;
    /**
     * 
     * @type {Reltoone}
     * @memberof ApiNodesIdDataRelationships
     */
    parent?: Reltoone;
}
/**
 * 
 * @export
 * @interface ApiTagsData
 */
export interface ApiTagsData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiTagsData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiTagsData
     */
    id?: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof ApiTagsData
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {ApiTagsDataAttributes}
     * @memberof ApiTagsData
     */
    attributes: ApiTagsDataAttributes;
}
/**
 * 
 * @export
 * @interface ApiTagsDataAttributes
 */
export interface ApiTagsDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ApiTagsDataAttributes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTagsDataAttributes
     */
    memo?: string;
}
/**
 * 
 * @export
 * @interface ApiTagsDataLinks
 */
export interface ApiTagsDataLinks {
    /**
     * 
     * @type {Link}
     * @memberof ApiTagsDataLinks
     */
    self?: Link;
}
/**
 * 
 * @export
 * @interface ApiTagsIdData
 */
export interface ApiTagsIdData {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiTagsIdData
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof ApiTagsIdData
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataAttributes}
     * @memberof ApiTagsIdData
     */
    attributes?: ApiTagsDataAttributes;
}
/**
 * @type Data
 * The document\'s `primary data` is a representation of the resource or collection of resources targeted by a request.
 * @export
 */
export type Data = Resource | Set<Resource> | number;

/**
 * 
 * @export
 * @interface Database
 */
export interface Database {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Database
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Database
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Database
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {DatabaseAttributes}
     * @memberof Database
     */
    attributes?: DatabaseAttributes;
}
/**
 * 
 * @export
 * @interface DatabaseAttributes
 */
export interface DatabaseAttributes {
    /**
     * 
     * @type {number}
     * @memberof DatabaseAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    sample_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    paper_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    figure_count?: string;
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    name: string;
}
/**
 * singular item
 * @export
 * @interface Datum
 */
export interface Datum {
    /**
     * 
     * @type {Resource}
     * @memberof Datum
     */
    data?: Resource;
}
/**
 * 
 * @export
 * @interface ErrorSource
 */
export interface ErrorSource {
    /**
     * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute].
     * @type {string}
     * @memberof ErrorSource
     */
    pointer?: string;
    /**
     * A string indicating which query parameter caused the error.
     * @type {string}
     * @memberof ErrorSource
     */
    parameter?: string;
}
/**
 * 
 * @export
 * @interface Failure
 */
export interface Failure {
    /**
     * 
     * @type {Set<ModelError>}
     * @memberof Failure
     */
    errors: Set<ModelError>;
    /**
     * 
     * @type {Meta}
     * @memberof Failure
     */
    meta?: Meta;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Failure
     */
    links?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Figure
 */
export interface Figure {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Figure
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Figure
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Figure
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {FigureAttributes}
     * @memberof Figure
     */
    attributes?: FigureAttributes;
    /**
     * 
     * @type {FigureRelationships}
     * @memberof Figure
     */
    relationships?: FigureRelationships;
}
/**
 * 
 * @export
 * @interface FigureAttributes
 */
export interface FigureAttributes {
    /**
     * 
     * @type {number}
     * @memberof FigureAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FigureAttributes
     */
    title: string;
}
/**
 * 
 * @export
 * @interface FigureRelationships
 */
export interface FigureRelationships {
    /**
     * 
     * @type {Reltomany}
     * @memberof FigureRelationships
     */
    paper?: Reltomany;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {ApiTagsData}
     * @memberof InlineObject
     */
    data: ApiTagsData;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {ApiTagsIdData}
     * @memberof InlineObject1
     */
    data: ApiTagsIdData;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {ApiNodesData}
     * @memberof InlineObject2
     */
    data: ApiNodesData;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {ApiNodesIdData}
     * @memberof InlineObject3
     */
    data: ApiNodesIdData;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Tag>}
     * @memberof InlineResponse200
     */
    data: Array<Tag>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse200
     */
    links: any & Pagination;
    /**
     * 
     * @type {Meta}
     * @memberof InlineResponse200
     */
    meta: Meta;
    /**
     * 
     * @type {Array<Resource>}
     * @memberof InlineResponse200
     */
    included?: Array<Resource>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Tag}
     * @memberof InlineResponse2001
     */
    data: Tag;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Node>}
     * @memberof InlineResponse2002
     */
    data: Array<Node>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2002
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2002
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {TagTree}
     * @memberof InlineResponse2003
     */
    data: TagTree;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {TagAncestors}
     * @memberof InlineResponse2004
     */
    data: TagAncestors;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {Tag}
     * @memberof InlineResponse201
     */
    data: Tag;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse201
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse201
     */
    links?: any & Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {Node}
     * @memberof InlineResponse2011
     */
    data: Node;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2011
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2011
     */
    links?: any & Pagination;
}
/**
 * @type Link
 * A link **MUST** be represented as either: a string containing the link\'s URL or a link object.
 * @export
 */
export type Link = LinkOneOf | string;

/**
 * 
 * @export
 * @interface LinkOneOf
 */
export interface LinkOneOf {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof LinkOneOf
     */
    href: string;
    /**
     * 
     * @type {Meta}
     * @memberof LinkOneOf
     */
    meta?: Meta;
}
/**
 * The `type` and `id` to non-empty members.
 * @export
 * @interface Linkage
 */
export interface Linkage {
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    id: string;
    /**
     * 
     * @type {Meta}
     * @memberof Linkage
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * 
     * @type {MetaPagination}
     * @memberof Meta
     */
    pagination: MetaPagination;
}
/**
 * 
 * @export
 * @interface MetaPagination
 */
export interface MetaPagination {
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    pages: number;
    /**
     * 
     * @type {number}
     * @memberof MetaPagination
     */
    count: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A unique identifier for this particular occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof ModelError
     */
    links?: { [key: string]: Link; };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    status?: string;
    /**
     * An application-specific error code, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
     * @type {string}
     * @memberof ModelError
     */
    title?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    detail?: string;
    /**
     * 
     * @type {ErrorSource}
     * @memberof ModelError
     */
    source?: ErrorSource;
    /**
     * 
     * @type {Meta}
     * @memberof ModelError
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Node
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Node
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Node
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {NodeAttributes}
     * @memberof Node
     */
    attributes?: NodeAttributes;
    /**
     * 
     * @type {ApiNodesIdDataRelationships}
     * @memberof Node
     */
    relationships?: ApiNodesIdDataRelationships;
}
/**
 * 
 * @export
 * @interface NodeAttributes
 */
export interface NodeAttributes {
    /**
     * 
     * @type {number}
     * @memberof NodeAttributes
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface Onlymeta
 */
export interface Onlymeta {
    /**
     * 
     * @type {Meta}
     * @memberof Onlymeta
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * The first page of data
     * @type {string | number}
     * @memberof Pagination
     */
    first?: string | number;
    /**
     * The last page of data
     * @type {string | number}
     * @memberof Pagination
     */
    last?: string | number;
    /**
     * The previous page of data
     * @type {string | number}
     * @memberof Pagination
     */
    prev?: string | number;
    /**
     * The next page of data
     * @type {string | number}
     * @memberof Pagination
     */
    next?: string | number;
}
/**
 * 
 * @export
 * @interface Paper
 */
export interface Paper {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Paper
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Paper
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Paper
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {PaperAttributes}
     * @memberof Paper
     */
    attributes?: PaperAttributes;
    /**
     * 
     * @type {PaperRelationships}
     * @memberof Paper
     */
    relationships?: PaperRelationships;
}
/**
 * 
 * @export
 * @interface PaperAttributes
 */
export interface PaperAttributes {
    /**
     * 
     * @type {number}
     * @memberof PaperAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    sample_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    figure_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    authors: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    DOI: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    container_title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    publisher?: string;
}
/**
 * 
 * @export
 * @interface PaperRelationships
 */
export interface PaperRelationships {
    /**
     * 
     * @type {Reltomany}
     * @memberof PaperRelationships
     */
    database?: Reltomany;
}
/**
 * singular item being [created](https://jsonapi.org/format/#crud-creating). `id` is optional and may be ignored if supplied and created by the system.
 * @export
 * @interface PostDatum
 */
export interface PostDatum {
    /**
     * 
     * @type {PostResource}
     * @memberof PostDatum
     */
    data?: PostResource;
}
/**
 * A POSTable resource object has an optional id.
 * @export
 * @interface PostResource
 */
export interface PostResource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    id?: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof PostResource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof PostResource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PostResource
     */
    links?: { [key: string]: Link; };
    /**
     * 
     * @type {Meta}
     * @memberof PostResource
     */
    meta?: Meta;
}
/**
 * A single relationship description
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Relationship
     */
    links?: RelationshipLinks;
    /**
     * Member, whose value represents `resource linkage`.
     * @type {RelationshipToOne | Set}
     * @memberof Relationship
     */
    data?: RelationshipToOne | Set<any>;
    /**
     * 
     * @type {Meta}
     * @memberof Relationship
     */
    meta?: Meta;
}
/**
 * A resource object **MAY** contain references to other resource objects (`relationships`). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipLinks
 */
export interface RelationshipLinks {
    [key: string]: object | any;

    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    self?: Link;
    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    related?: Link;
}
/**
 * References to other resource objects in a to-one (`relationship`). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipToOne
 */
export interface RelationshipToOne {
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    id: string;
    /**
     * 
     * @type {Meta}
     * @memberof RelationshipToOne
     */
    meta?: Meta;
}
/**
 * A multiple relationship
 * @export
 * @interface Reltomany
 */
export interface Reltomany {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltomany
     */
    links?: RelationshipLinks;
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomany
     */
    data?: Set<Linkage>;
    /**
     * 
     * @type {Meta}
     * @memberof Reltomany
     */
    meta?: Meta;
}
/**
 * A multiple relationship, data only.
 * @export
 * @interface Reltomanydata
 */
export interface Reltomanydata {
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomanydata
     */
    data?: Set<Linkage>;
}
/**
 * A singular relationship
 * @export
 * @interface Reltoone
 */
export interface Reltoone {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltoone
     */
    links?: RelationshipLinks;
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoone
     */
    data?: RelationshipToOne;
    /**
     * 
     * @type {Meta}
     * @memberof Reltoone
     */
    meta?: Meta;
}
/**
 * A singular relationship, data only.
 * @export
 * @interface Reltoonedata
 */
export interface Reltoonedata {
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoonedata
     */
    data?: RelationshipToOne;
}
/**
 * Resource objects appear in a JSON API document to represent resources.
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    id: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof Resource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof Resource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Resource
     */
    links?: { [key: string]: Link; };
    /**
     * 
     * @type {Meta}
     * @memberof Resource
     */
    meta?: Meta;
}
/**
 * 
 * @export
 * @interface Sample
 */
export interface Sample {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Sample
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Sample
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Sample
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {SampleAttributes}
     * @memberof Sample
     */
    attributes?: SampleAttributes;
    /**
     * 
     * @type {FigureRelationships}
     * @memberof Sample
     */
    relationships?: FigureRelationships;
}
/**
 * 
 * @export
 * @interface SampleAttributes
 */
export interface SampleAttributes {
    /**
     * 
     * @type {number}
     * @memberof SampleAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SampleAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Tag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Tag
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Tag
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {ApiTagsDataAttributes}
     * @memberof Tag
     */
    attributes: ApiTagsDataAttributes;
    /**
     * 
     * @type {TagRelationships}
     * @memberof Tag
     */
    relationships: TagRelationships;
}
/**
 * 
 * @export
 * @interface TagAncestors
 */
export interface TagAncestors {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof TagAncestors
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof TagAncestors
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof TagAncestors
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {TagAncestorsAttributes}
     * @memberof TagAncestors
     */
    attributes: TagAncestorsAttributes;
}
/**
 * 
 * @export
 * @interface TagAncestorsAttributes
 */
export interface TagAncestorsAttributes {
    /**
     * 
     * @type {Array<TagAncestorsAttributesAncestors>}
     * @memberof TagAncestorsAttributes
     */
    ancestors: Array<TagAncestorsAttributesAncestors>;
}
/**
 * 
 * @export
 * @interface TagAncestorsAttributesAncestors
 */
export interface TagAncestorsAttributesAncestors {
    /**
     * 
     * @type {string}
     * @memberof TagAncestorsAttributesAncestors
     */
    name_ja?: string;
    /**
     * 
     * @type {string}
     * @memberof TagAncestorsAttributesAncestors
     */
    name_en?: string;
    /**
     * 
     * @type {string}
     * @memberof TagAncestorsAttributesAncestors
     */
    node_id: string;
    /**
     * 
     * @type {string}
     * @memberof TagAncestorsAttributesAncestors
     */
    tag_id: string;
    /**
     * 
     * @type {string}
     * @memberof TagAncestorsAttributesAncestors
     */
    parent_node_id?: string;
}
/**
 * 
 * @export
 * @interface TagRelationships
 */
export interface TagRelationships {
    /**
     * 
     * @type {TagRelationshipsNodes}
     * @memberof TagRelationships
     */
    nodes: TagRelationshipsNodes;
    /**
     * 
     * @type {TagRelationshipsTermJaId}
     * @memberof TagRelationships
     */
    term_ja_id: TagRelationshipsTermJaId;
    /**
     * 
     * @type {TagRelationshipsTermJaId}
     * @memberof TagRelationships
     */
    term_en_id: TagRelationshipsTermJaId;
    /**
     * 
     * @type {TagRelationshipsNodes}
     * @memberof TagRelationships
     */
    synonyms_ids: TagRelationshipsNodes;
}
/**
 * 
 * @export
 * @interface TagRelationshipsNodes
 */
export interface TagRelationshipsNodes {
    /**
     * 
     * @type {TagRelationshipsNodesMeta}
     * @memberof TagRelationshipsNodes
     */
    meta: TagRelationshipsNodesMeta;
    /**
     * 
     * @type {Array<ApiNodesDataAttributesTag>}
     * @memberof TagRelationshipsNodes
     */
    data: Array<ApiNodesDataAttributesTag>;
}
/**
 * 
 * @export
 * @interface TagRelationshipsNodesMeta
 */
export interface TagRelationshipsNodesMeta {
    /**
     * 
     * @type {number}
     * @memberof TagRelationshipsNodesMeta
     */
    count: number;
}
/**
 * 
 * @export
 * @interface TagRelationshipsTermJaId
 */
export interface TagRelationshipsTermJaId {
    /**
     * 
     * @type {ApiNodesDataAttributesTag}
     * @memberof TagRelationshipsTermJaId
     */
    data: ApiNodesDataAttributesTag;
}
/**
 * 
 * @export
 * @interface TagTree
 */
export interface TagTree {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof TagTree
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof TagTree
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof TagTree
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {TagTreeAttributes}
     * @memberof TagTree
     */
    attributes: TagTreeAttributes;
}
/**
 * 
 * @export
 * @interface TagTreeAttributes
 */
export interface TagTreeAttributes {
    /**
     * 
     * @type {string}
     * @memberof TagTreeAttributes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TagTreeAttributes
     */
    node_id: string;
    /**
     * 
     * @type {string}
     * @memberof TagTreeAttributes
     */
    tag_id: string;
    /**
     * 
     * @type {string}
     * @memberof TagTreeAttributes
     */
    parent_node_id: string;
    /**
     * 
     * @type {number}
     * @memberof TagTreeAttributes
     */
    tree_level: number;
    /**
     * 
     * @type {Array<TagTreeAttributes>}
     * @memberof TagTreeAttributes
     */
    children: Array<TagTreeAttributes>;
}
/**
 * 
 * @export
 * @interface Term
 */
export interface Term {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Term
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Term
     */
    id: string;
    /**
     * 
     * @type {ApiTagsDataLinks}
     * @memberof Term
     */
    links?: ApiTagsDataLinks;
    /**
     * 
     * @type {TermAttributes}
     * @memberof Term
     */
    attributes: TermAttributes;
}
/**
 * 
 * @export
 * @interface TermAttributes
 */
export interface TermAttributes {
    /**
     * 
     * @type {string}
     * @memberof TermAttributes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TermAttributes
     */
    language: string;
}

/**
 * StarrydataApi - axios parameter creator
 * @export
 */
export const StarrydataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiNodes: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiTags: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiNodesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiNodesId', 'id', id)
            const localVarPath = `/api/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiTagsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiTagsId', 'id', id)
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiNodes: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiTags: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiNodesId: async (id: string, inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiNodesId', 'id', id)
            const localVarPath = `/api/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiTagsId: async (id: string, inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiTagsId', 'id', id)
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiNodesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiNodesId', 'id', id)
            const localVarPath = `/api/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagAncestorsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiTagAncestorsId', 'id', id)
            const localVarPath = `/api/tag_ancestors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagTreeId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiTagTreeId', 'id', id)
            const localVarPath = `/api/tag_tree/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagsId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiTagsId', 'id', id)
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarrydataApi - functional programming interface
 * @export
 */
export const StarrydataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarrydataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiNodes(inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiNodes(inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiTags(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiTags(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiNodesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiNodesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiTagsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiTags(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiNodesId(id: string, inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiNodesId(id, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiTagsId(id: string, inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiTagsId(id, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiNodesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiTagAncestorsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiTagAncestorsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiTagTreeId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiTagTreeId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiTagsId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StarrydataApi - factory interface
 * @export
 */
export const StarrydataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarrydataApiFp(configuration)
    return {
        /**
         * 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiNodes(inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.createApiNodes(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiTags(inlineObject?: InlineObject, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.createApiTags(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiNodesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiNodesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiTagsId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiTagsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listApiNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.listApiTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiNodesId(id: string, inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.partialUpdateApiNodesId(id, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiTagsId(id: string, inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.partialUpdateApiTagsId(id, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.retrieveApiNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagAncestorsId(id: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.retrieveApiTagAncestorsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagTreeId(id: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.retrieveApiTagTreeId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.retrieveApiTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StarrydataApi - object-oriented interface
 * @export
 * @class StarrydataApi
 * @extends {BaseAPI}
 */
export class StarrydataApi extends BaseAPI {
    /**
     * 
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiNodes(inlineObject2?: InlineObject2, options?: any) {
        return StarrydataApiFp(this.configuration).createApiNodes(inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiTags(inlineObject?: InlineObject, options?: any) {
        return StarrydataApiFp(this.configuration).createApiTags(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiNodesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiNodesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiTagsId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiTagsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this node.
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiNodesId(id: string, inlineObject3?: InlineObject3, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiNodesId(id, inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this tag.
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiTagsId(id: string, inlineObject1?: InlineObject1, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiTagsId(id, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this node.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiTagAncestorsId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiTagAncestorsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiTagTreeId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiTagTreeId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this tag.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }
}


